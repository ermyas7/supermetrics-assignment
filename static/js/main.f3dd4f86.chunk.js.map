{"version":3,"sources":["App.service.js","App.context.js","App.constant.js","components/Register.js","hooks/useForm.js","components/Error.js","components/Stats.js","App.component.js","index.js"],"names":["doHttp","url","params","a","fetch","mode","headers","response","json","responseBody","error","message","data","console","log","groupByKey","arr","key","Array","isArray","reduce","obj","element","push","Object","create","averagePostPerUserPerMonth","posts","groupedPostByUser","groupedPostByUserAndMonth","keys","forEach","groupedPost","sum","length","averagePostNum","AppContext","createContext","AppProvider","children","useState","token","setToken","setError","setPosts","nextPage","setNextPage","loading","setLoading","useEffect","localToken","window","localStorage","getItem","getPosts","useCallback","method","oldPost","page","Provider","value","Register","initialData","inputs","setInputs","submitHandler","evt","cb","preventDefault","clearForm","clearedInputs","fromEntries","entries","map","changeHandler","target","name","useForm","email","useContext","addToken","body","JSON","stringify","client_id","sl_token","setItem","className","onSubmit","htmlFor","type","id","onChange","required","Error","months","dayjs","extend","isoWeek","Stats","enhancedPost","useMemo","post","month","created_time","week","averageCharLengthByMonthEntity","arrayGroupedObj","result","acc","ele","getAvaregePostLengthByKey","LongestPostPerCharByMonth","groupedPosts","bigPostByMonth","biggestPost","getBigPostByChar","getLongestPostByChar","postEntityByWeekNumber","groupedPostsByWeek","totalPostByWeek","totalPostNumber","averagePostByUser","userId","postNo","App","registerTokenRequired","MainApp","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f3dd4f86.chunk.js","sourcesContent":["export const doHttp = async (url, params) => {\n    try {\n        const response = await fetch(\n            url,\n             {  mode: 'cors',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                ...params});       \n        const responseBody = await response.json();\n        if(responseBody.error && responseBody.error.message){\n            return {error: responseBody.error.message};\n        }\n        return {data: responseBody.data};\n    } catch (error) {\n        console.log(error);\n        return {error: error.message}\n    }\n}\n\nconst  groupByKey = (arr, key) => {\n    if(!Array.isArray(arr)){\n        return;\n    }\n    return arr.reduce((obj, element) => {\n        obj[element[key]] = obj[element[key]] || [];\n        obj[element[key]].push(element);\n        return obj;\n    }, Object.create(null));\n}\n\nconst averageCharLength = (arr) => {\n    const sum = arr.reduce((acc, ele) => acc + ele.message.length, 0);\n    return (sum / arr.length);\n}\n\nconst averagePostNum = (groupedPost) => {\n    let sum = 0;\n    Object.keys(groupedPost).forEach((key) => {\n        sum += groupedPost[key].length;\n    })\n\n    return sum/Object.keys(groupedPost).length;\n}\nconst getBigPostByChar = (posts) => {\n\n    let biggestPost = posts[0];\n    posts.forEach((element) => {\n        if(element.message.length > biggestPost.message.length){\n            biggestPost = element;\n        }\n    });\n    return biggestPost;\n}\nexport const getAvaregePostLengthByKey = (posts, key) => {\n    const arrayGroupedObj = groupByKey(posts, key);\n    const result = {};\n    Object.keys(arrayGroupedObj).forEach((key) => {\n        result[key] = averageCharLength(arrayGroupedObj[key]);\n    });\n    return result;\n}\n\nexport const getLongestPostByChar = (posts, key) => {\n    const groupedPosts = groupByKey(posts, key);\n    const bigPostByMonth = {};\n    Object.keys(groupedPosts).forEach((key) => {\n        bigPostByMonth[key] = getBigPostByChar(groupedPosts[key]);\n    });\n    return bigPostByMonth;\n}\n\nexport const totalPostNumber = (posts, key) => {\n    const groupedPostsByWeek = groupByKey(posts, key);\n    const totalPostByWeek = {};\n    Object.keys(groupedPostsByWeek).forEach((key) => {\n        totalPostByWeek[key] = groupedPostsByWeek[key].length;\n    });\n    return totalPostByWeek;\n}\n\nexport const averagePostPerUserPerMonth = (posts) => {\n    const groupedPostByUser = groupByKey(posts, 'from_id');\n    const groupedPostByUserAndMonth = {};\n    Object.keys(groupedPostByUser)\n    .forEach((key) => {\n        groupedPostByUserAndMonth[key] = averagePostNum(groupByKey(groupedPostByUser[key], 'month'));\n    });\n\n    return groupedPostByUserAndMonth;\n}\n","import { createContext, useEffect, useState, useCallback } from 'react';\nimport { doHttp } from './App.service';\nimport { POSTS_URL } from './App.constant';\n\nexport const AppContext = createContext();\n\nconst AppProvider = ({children}) => {\n    const [ token, setToken ] = useState('');\n    const [ error, setError ] = useState('');\n    const [posts, setPosts] = useState([]);\n    const [nextPage, setNextPage] = useState(1);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(() => {\n        const localToken = window.localStorage.getItem('sl_token');\n        setToken(localToken);\n        if(!token) setLoading(false);\n    }, [token]);\n\n    const getPosts = useCallback(async () => {\n            setLoading(true);\n            const {data, error} = await doHttp(`${POSTS_URL}?sl_token=${token}&page=${nextPage}`, {method: 'get'});\n            if(error){\n                setError(error);\n                setLoading(false);\n            }else{\n                setPosts((oldPost) => [...oldPost, ...data.posts]);\n                setNextPage(data.page + 1);\n                if(data.page === 10) setLoading(false);\n            }\n        },[nextPage, token]);\n    useEffect(() => {\n        if(token && nextPage <= 10){\n            getPosts();\n        }\n    }, [getPosts, nextPage, token]);\n\n    return(\n        <AppContext.Provider value={{\n            token,\n            setToken,\n            error,\n            setError,\n            posts,\n            loading\n        }}>\n            {children}\n        </AppContext.Provider>        \n    )\n};\n\nexport default AppProvider;","export const REGISTER_URL = 'https://api.supermetrics.com/assignment/register';\nexport const CLIENT_TOKEN = 'ju16a6m81mhid5ue1z3v2g0uh';\nexport const POSTS_URL = 'https://api.supermetrics.com/assignment/posts';","import { useCallback, useContext } from 'react';\nimport { useForm } from '../hooks';\nimport { doHttp } from '../App.service';\nimport { REGISTER_URL, CLIENT_TOKEN } from '../App.constant';\nimport { AppContext } from '../App.context';\n\nconst Register = () => {\n    const { inputs, changeHandler, submitHandler } = useForm({name: '', email: ''});\n    const {setToken, setError} = useContext(AppContext);\n\n    const addToken = useCallback( async () => {\n        const params = {\n            method: 'POST',\n            body: JSON.stringify({\n                name: inputs.name,\n                email: inputs.email,\n                client_id: CLIENT_TOKEN\n            })\n        };\n        const { data, error } = await doHttp(REGISTER_URL, params);\n        if(error){\n            setError(error);\n        }else{\n            setError('');\n            setToken(data.sl_token);\n            window.localStorage.setItem('sl_token', data.sl_token);\n        }\n    }, [inputs.email, inputs.name, setError, setToken]);\n\n\n    return(\n        <div className=\"supermetrics-register\">\n            <h2 className=\"supermetrics-heading supermetrics-heading-secondary\">Register Token</h2>\n            <form className=\"supermetrics-form\" onSubmit={ (evt) => submitHandler(evt, addToken)}>\n                <div className=\"supermetrics-input-group\">\n                    <label htmlFor=\"email\">Email:</label>\n                    <input type=\"email\" id=\"email\" name=\"email\" onChange={changeHandler} value={inputs.email} required/>\n                </div>\n                <div className=\"supermetrics-input-group\">\n                    <label htmlFor=\"name\">Name:</label>\n                    <input type=\"text\" id=\"name\" name=\"name\" onChange={changeHandler} value={inputs.name} required/>\n                </div>\n                <button type=\"submit\">Register</button>\n            </form>\n        </div>\n    );\n}\n\nexport default Register;","import { useState } from \"react\";\n\nexport const useForm = (initialData = {}) => {\n    const [inputs, setInputs] = useState(initialData);\n\n    const changeHandler = (evt) => {\n        const { value, name } = evt.target;\n        setInputs({...inputs, [name]: value});\n    }\n\n    const submitHandler = (evt, cb = () => {}) => {\n        evt.preventDefault();\n        cb();\n        clearForm();\n    }\n\n    const clearForm = () => {\n        const clearedInputs = Object.fromEntries(Object.entries(inputs).map(([key, value]) => [key, '']));\n        setInputs(clearedInputs);\n    };\n\n    return {\n        inputs,\n        changeHandler,\n        submitHandler\n    }\n};","import { useContext } from \"react\";\nimport { AppContext } from \"../App.context\";\n\nconst Error =  () => {\n    const {error} = useContext(AppContext);\n    return(\n    <h3>{error} , Try to register token again! </h3>\n);}\n\nexport default Error;","import { Fragment, useContext, useMemo } from \"react\";\nimport { AppContext } from \"../App.context\";\nimport dayjs from 'dayjs';\nimport isoWeek from 'dayjs/plugin/isoWeek';\nimport { getAvaregePostLengthByKey, getLongestPostByChar, totalPostNumber, averagePostPerUserPerMonth } from '../App.service';\n\nconst months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n// extend dayjs to support .week \ndayjs.extend(isoWeek)\n\nconst Stats = () => {\n    const {posts} = useContext(AppContext);\n    const enhancedPost = useMemo(() => {\n        if(posts.length === 0) return [];\n        return posts.map((post) => {\n            return {\n                ...post,\n                month: months[dayjs(post.created_time).month()],\n                week: dayjs(post.created_time).isoWeek()\n            }\n        })\n    }, [posts]);\n\n    const averageCharLengthByMonthEntity = useMemo(() => {\n        return Object.entries(getAvaregePostLengthByKey(enhancedPost, 'month'));\n    }, [enhancedPost]);\n\n    const LongestPostPerCharByMonth = useMemo(() => {\n        return Object.entries(getLongestPostByChar(enhancedPost, 'month'));\n    }, [enhancedPost]);\n\n    const postEntityByWeekNumber = useMemo(() => {\n        return Object.entries(totalPostNumber(enhancedPost, 'week'));\n    }, [enhancedPost]);\n\n    const averagePostByUser = useMemo(() =>{\n        return Object.entries(averagePostPerUserPerMonth(enhancedPost));\n    }, [enhancedPost])\n\n    console.log('------------------------------------------------')\n    console.log('Average character length of posts per month')\n    console.log(averageCharLengthByMonthEntity);\n    console.log('------------------------------------------------')\n    console.log('Longest post by character length per month')\n    console.log(LongestPostPerCharByMonth);\n    console.log('------------------------------------------------')\n    console.log('Total posts split by week number')\n    console.log(postEntityByWeekNumber);\n    console.log('------------------------------------------------')\n    console.log('Average number of posts per user per month')\n    console.log(averagePostByUser);\n    if(posts.length === 0) return null;\n    return(\n        <div className=\"supermetrics-stats\">\n            <h2 className=\"supermetrics-heading\">Stats</h2>\n            <br/>\n            <h3>Please check the log from the developer tool to see the detail data</h3>\n            <hr/>\n            <br/>\n            <h3>Average character length of posts per month </h3>\n            <br/>\n             {\n                 averageCharLengthByMonthEntity.map(([key, value]) => {\n                     return <p key={key}>{`${key} ------ ${value}`}</p>\n                 })\n             }  \n             <br/>\n\n            <br/>\n            <hr/>\n            <br/>\n            <h3>Longest post by character length per month </h3>\n            <br/>\n             {\n                 LongestPostPerCharByMonth.map(([key, value]) => {\n                     return <Fragment key={key}>\n                         <p>{`${key} ------ ${value.message}`}</p>\n                         <br/>\n                     </Fragment>\n                 })\n             }  \n             <br/>\n\n             <br/>\n            <hr/>\n            <br/>\n            <h3>Total posts split by week number </h3>\n            <br/>\n             {\n                 postEntityByWeekNumber.map(([key, value]) => {\n                     return <p key={key}>{`week no - ${key} ------ number of posts - ${value}`}</p>\n                 })\n             }  \n             <br/>\n\n             <br/>\n            <hr/>\n            <br/>\n            <h3>Average number of posts per user per month </h3>\n            <br/>\n             {\n                 averagePostByUser.map(([userId, postNo]) => {\n                     return (\n                        <p key={userId}>{`${userId} have ${postNo} posts per month Avg`}</p> \n                     )\n                 })\n             }  \n             <br/>\n\n            <br/>\n            <hr/>\n            <br/>\n\n        </div>\n    )\n};\n\nexport default Stats;","import './App.css';\nimport {useMemo} from 'react';\nimport { useContext } from 'react';\nimport { AppContext } from './App.context';\nimport Register from './components/Register';\nimport Error from './components/Error';\nimport Stats from './components/Stats';\n\n\nfunction App() {\n  const {token, error, loading} = useContext(AppContext);\n  const registerTokenRequired = useMemo(() => {\n    return !(token && !error);\n  }, [error, token]);\n\n  return (\n    <div className=\"supermetrics\">\n        <h1>Supermetrics API</h1>\n        {loading && token && <p>Loading...</p>}\n        {error && <Error /> }\n        {registerTokenRequired && <Register/>}\n        {!registerTokenRequired && !loading && <Stats />}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.component';\nimport AppProvider from './App.context';\n\nconst MainApp = () => <AppProvider><App/></AppProvider>\nReactDOM.render(\n  <React.StrictMode>\n    <MainApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}